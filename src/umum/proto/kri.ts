// @generated by protobuf-ts 2.9.5
// @generated from protobuf file "kri.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ProyekPb
 */
export interface ProyekPb {
    /**
     * @generated from protobuf field: string nama = 1;
     */
    nama: string;
    /**
     * @generated from protobuf field: repeated SistemPb koleksi_sistem = 2;
     */
    koleksiSistem: SistemPb[];
}
/**
 * @generated from protobuf message SistemPb
 */
export interface SistemPb {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string nama = 2;
     */
    nama: string;
    /**
     * @generated from protobuf field: TargetSistemPb target_sistem = 3;
     */
    targetSistem: TargetSistemPb;
    /**
     * @generated from protobuf field: PlatformPb platform = 4;
     */
    platform: PlatformPb;
    /**
     * @generated from protobuf field: FrameworkPb framework = 5;
     */
    framework: FrameworkPb;
    /**
     * @generated from protobuf field: BahasaPemrogramanPb bahasa_pemrograman = 6;
     */
    bahasaPemrograman: BahasaPemrogramanPb;
    /**
     * @generated from protobuf field: repeated SistemPb koleksi_subsistem = 7;
     */
    koleksiSubsistem: SistemPb[];
    /**
     * @generated from protobuf field: repeated KelasPb koleksi_kelas = 8;
     */
    koleksiKelas: KelasPb[];
}
/**
 * @generated from protobuf message KelasPb
 */
export interface KelasPb {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string nama = 2;
     */
    nama: string;
    /**
     * @generated from protobuf field: repeated AtributPb koleksi_atribut = 3;
     */
    koleksiAtribut: AtributPb[];
    /**
     * @generated from protobuf field: repeated OperasiPb koleksi_operasi = 4;
     */
    koleksiOperasi: OperasiPb[];
}
/**
 * @generated from protobuf message AtributPb
 */
export interface AtributPb {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: VisibilitasPb visibilitas = 2;
     */
    visibilitas: VisibilitasPb;
    /**
     * @generated from protobuf field: bool diwariskan = 3;
     */
    diwariskan: boolean;
    /**
     * @generated from protobuf field: string nama = 4;
     */
    nama: string;
    /**
     * @generated from protobuf field: bool rentang_multiplisitas_diatur = 5;
     */
    rentangMultiplisitasDiatur: boolean;
    /**
     * @generated from protobuf field: RentangMultiplisitasPb rentang_multiplisitas = 6;
     */
    rentangMultiplisitas?: RentangMultiplisitasPb;
    /**
     * @generated from protobuf field: optional string tipe = 7;
     */
    tipe?: string;
    /**
     * @generated from protobuf field: optional string bawaan = 8;
     */
    bawaan?: string;
    /**
     * @generated from protobuf field: bool sebagai_id = 9;
     */
    sebagaiId: boolean;
    /**
     * @generated from protobuf field: bool baca_saja = 10;
     */
    bacaSaja: boolean;
    /**
     * @generated from protobuf field: bool selalu_tulis_keunikan = 11;
     */
    selaluTulisKeunikan: boolean;
    /**
     * @generated from protobuf field: bool unik = 12;
     */
    unik: boolean;
    /**
     * @generated from protobuf field: bool tuliskan_keterurutan = 13;
     */
    tuliskanKeterurutan: boolean;
    /**
     * @generated from protobuf field: bool terurut = 14;
     */
    terurut: boolean;
    /**
     * @generated from protobuf field: bool urutan = 15;
     */
    urutan: boolean;
}
/**
 * @generated from protobuf message OperasiPb
 */
export interface OperasiPb {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number; // Diwarisi dari IsiProyek
    /**
     * @generated from protobuf field: string nama = 2;
     */
    nama: string; // Diwarisi dari IsiProyek
    /**
     * @generated from protobuf field: VisibilitasPb visibilitas = 3;
     */
    visibilitas: VisibilitasPb;
    /**
     * @generated from protobuf field: optional string tipe_kembalian = 4;
     */
    tipeKembalian?: string;
    /**
     * @generated from protobuf field: bool rentang_multiplisitas_kembalian_diatur = 5;
     */
    rentangMultiplisitasKembalianDiatur: boolean;
    /**
     * @generated from protobuf field: RentangMultiplisitasPb rentang_multiplisitas_kembalian = 6;
     */
    rentangMultiplisitasKembalian?: RentangMultiplisitasPb;
    /**
     * @generated from protobuf field: bool sebagai_query = 7;
     */
    sebagaiQuery: boolean;
    /**
     * @generated from protobuf field: bool selalu_tulis_keunikan_kembalian = 8;
     */
    selaluTulisKeunikanKembalian: boolean;
    /**
     * @generated from protobuf field: bool kembalian_unik = 9;
     */
    kembalianUnik: boolean;
    /**
     * @generated from protobuf field: bool tuliskan_keterurutan_kembalian = 10;
     */
    tuliskanKeterurutanKembalian: boolean;
    /**
     * @generated from protobuf field: bool kembalian_terurut = 11;
     */
    kembalianTerurut: boolean;
    /**
     * @generated from protobuf field: bool kembalian_adalah_urutan = 12;
     */
    kembalianAdalahUrutan: boolean;
    /**
     * @generated from protobuf field: repeated ParameterOperasiPb koleksi_parameter = 13;
     */
    koleksiParameter: ParameterOperasiPb[];
}
/**
 * @generated from protobuf message ParameterOperasiPb
 */
export interface ParameterOperasiPb {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string nama = 2;
     */
    nama: string;
    /**
     * @generated from protobuf field: optional string tipe = 3;
     */
    tipe?: string;
    /**
     * @generated from protobuf field: optional string bawaan = 4;
     */
    bawaan?: string;
    /**
     * @generated from protobuf field: ArahParameterPb arah = 5;
     */
    arah: ArahParameterPb;
    /**
     * @generated from protobuf field: bool arah_diatur = 6;
     */
    arahDiatur: boolean;
    /**
     * @generated from protobuf field: bool rentang_multiplisitas_diatur = 7;
     */
    rentangMultiplisitasDiatur: boolean;
    /**
     * @generated from protobuf field: RentangMultiplisitasPb rentang_multiplisitas = 8;
     */
    rentangMultiplisitas?: RentangMultiplisitasPb;
    /**
     * @generated from protobuf field: bool selalu_tulis_keunikan = 9;
     */
    selaluTulisKeunikan: boolean;
    /**
     * @generated from protobuf field: bool unik = 10;
     */
    unik: boolean;
    /**
     * @generated from protobuf field: bool tuliskan_keterurutan = 11;
     */
    tuliskanKeterurutan: boolean;
    /**
     * @generated from protobuf field: bool terurut = 12;
     */
    terurut: boolean;
    /**
     * @generated from protobuf field: bool urutan = 13;
     */
    urutan: boolean;
}
/**
 * @generated from protobuf message RentangMultiplisitasPb
 */
export interface RentangMultiplisitasPb {
    /**
     * @generated from protobuf field: int32 minimal = 1;
     */
    minimal: number;
    /**
     * @generated from protobuf field: int32 maksimal = 2;
     */
    maksimal: number;
}
/**
 * @generated from protobuf message SequenceDiagramPb
 */
export interface SequenceDiagramPb {
    /**
     * @generated from protobuf field: string nama = 1;
     */
    nama: string;
    /**
     * @generated from protobuf field: repeated KomponenSequenceDiagramPb koleksiKomponen = 2;
     */
    koleksiKomponen: KomponenSequenceDiagramPb[];
    /**
     * @generated from protobuf field: repeated ObjekPb koleksiObjek = 3;
     */
    koleksiObjek: ObjekPb[];
}
/**
 * @generated from protobuf message KomponenSequenceDiagramPb
 */
export interface KomponenSequenceDiagramPb {
    /**
     * @generated from protobuf field: JenisKomponenSequenceDiagramPb jenis = 1;
     */
    jenis: JenisKomponenSequenceDiagramPb;
    /**
     * @generated from protobuf field: uint32 id = 2;
     */
    id: number;
}
/**
 * @generated from protobuf message ObjekPb
 */
export interface ObjekPb {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string nama = 2;
     */
    nama: string;
    /**
     * @generated from protobuf field: uint32 idKlas = 3;
     */
    idKlas: number;
}
/**
 * @generated from protobuf enum TargetSistemPb
 */
export enum TargetSistemPb {
    /**
     * @generated from protobuf enum value: TARGET_SISTEM_PB_TIDAK_DIATUR = 0;
     */
    TIDAK_DIATUR = 0,
    /**
     * @generated from protobuf enum value: TARGET_SISTEM_PB_DESKTOP = 1;
     */
    DESKTOP = 1,
    /**
     * @generated from protobuf enum value: TARGET_SISTEM_PB_SERVER = 2;
     */
    SERVER = 2
}
/**
 * @generated from protobuf enum FrameworkPb
 */
export enum FrameworkPb {
    /**
     * @generated from protobuf enum value: FRAMEWORK_PB_TIDAK_DIATUR = 0;
     */
    TIDAK_DIATUR = 0,
    /**
     * @generated from protobuf enum value: FRAMEWORK_PB_ELECTRON = 1;
     */
    ELECTRON = 1
}
/**
 * @generated from protobuf enum BahasaPemrogramanPb
 */
export enum BahasaPemrogramanPb {
    /**
     * @generated from protobuf enum value: BAHASA_PEMROGRAMAN_PB_TIDAK_DIATUR = 0;
     */
    TIDAK_DIATUR = 0,
    /**
     * @generated from protobuf enum value: BAHASA_PEMROGRAMAN_PB_TYPESCRIPT = 1;
     */
    TYPESCRIPT = 1
}
/**
 * @generated from protobuf enum PlatformPb
 */
export enum PlatformPb {
    /**
     * @generated from protobuf enum value: PLATFORM_PB_TIDAK_DIATUR = 0;
     */
    TIDAK_DIATUR = 0,
    /**
     * @generated from protobuf enum value: PLATFORM_PB_CROSS_PLATFORM_DESKTOP = 1;
     */
    CROSS_PLATFORM_DESKTOP = 1,
    /**
     * @generated from protobuf enum value: PLATFORM_PB_NODE_JS = 2;
     */
    NODE_JS = 2
}
/**
 * @generated from protobuf enum ArahParameterPb
 */
export enum ArahParameterPb {
    /**
     * @generated from protobuf enum value: ARAH_PARAMETER_TIDAK_DIATUR = 0;
     */
    ARAH_PARAMETER_TIDAK_DIATUR = 0,
    /**
     * @generated from protobuf enum value: ARAH_PARAMETER_MASUK = 1;
     */
    ARAH_PARAMETER_MASUK = 1,
    /**
     * @generated from protobuf enum value: ARAH_PARAMETER_KELUAR = 2;
     */
    ARAH_PARAMETER_KELUAR = 2,
    /**
     * @generated from protobuf enum value: ARAH_PARAMETER_MASUK_KELUAR = 3;
     */
    ARAH_PARAMETER_MASUK_KELUAR = 3
}
/**
 * @generated from protobuf enum VisibilitasPb
 */
export enum VisibilitasPb {
    /**
     * @generated from protobuf enum value: VISIBILITAS_PB_TIDAK_DIATUR = 0;
     */
    TIDAK_DIATUR = 0,
    /**
     * @generated from protobuf enum value: VISIBILITAS_PB_PUBLIC = 1;
     */
    PUBLIC = 1,
    /**
     * @generated from protobuf enum value: VISIBILITAS_PB_PRIVATE = 2;
     */
    PRIVATE = 2,
    /**
     * @generated from protobuf enum value: VISIBILITAS_PB_PROTECTED = 3;
     */
    PROTECTED = 3,
    /**
     * @generated from protobuf enum value: VISIBILITAS_PB_PACKAGE = 4;
     */
    PACKAGE = 4
}
/**
 * @generated from protobuf enum JenisKomponenSequenceDiagramPb
 */
export enum JenisKomponenSequenceDiagramPb {
    /**
     * @generated from protobuf enum value: JENIS_KOMPONEN_SD_OBJEK = 0;
     */
    JENIS_KOMPONEN_SD_OBJEK = 0
}
// @generated message type with reflection information, may provide speed optimized methods
class ProyekPb$Type extends MessageType<ProyekPb> {
    constructor() {
        super("ProyekPb", [
            { no: 1, name: "nama", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "koleksi_sistem", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SistemPb }
        ]);
    }
    create(value?: PartialMessage<ProyekPb>): ProyekPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nama = "";
        message.koleksiSistem = [];
        if (value !== undefined)
            reflectionMergePartial<ProyekPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProyekPb): ProyekPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string nama */ 1:
                    message.nama = reader.string();
                    break;
                case /* repeated SistemPb koleksi_sistem */ 2:
                    message.koleksiSistem.push(SistemPb.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProyekPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string nama = 1; */
        if (message.nama !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.nama);
        /* repeated SistemPb koleksi_sistem = 2; */
        for (let i = 0; i < message.koleksiSistem.length; i++)
            SistemPb.internalBinaryWrite(message.koleksiSistem[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ProyekPb
 */
export const ProyekPb = new ProyekPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SistemPb$Type extends MessageType<SistemPb> {
    constructor() {
        super("SistemPb", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "nama", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "target_sistem", kind: "enum", T: () => ["TargetSistemPb", TargetSistemPb, "TARGET_SISTEM_PB_"] },
            { no: 4, name: "platform", kind: "enum", T: () => ["PlatformPb", PlatformPb, "PLATFORM_PB_"] },
            { no: 5, name: "framework", kind: "enum", T: () => ["FrameworkPb", FrameworkPb, "FRAMEWORK_PB_"] },
            { no: 6, name: "bahasa_pemrograman", kind: "enum", T: () => ["BahasaPemrogramanPb", BahasaPemrogramanPb, "BAHASA_PEMROGRAMAN_PB_"] },
            { no: 7, name: "koleksi_subsistem", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SistemPb },
            { no: 8, name: "koleksi_kelas", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KelasPb }
        ]);
    }
    create(value?: PartialMessage<SistemPb>): SistemPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.nama = "";
        message.targetSistem = 0;
        message.platform = 0;
        message.framework = 0;
        message.bahasaPemrograman = 0;
        message.koleksiSubsistem = [];
        message.koleksiKelas = [];
        if (value !== undefined)
            reflectionMergePartial<SistemPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SistemPb): SistemPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string nama */ 2:
                    message.nama = reader.string();
                    break;
                case /* TargetSistemPb target_sistem */ 3:
                    message.targetSistem = reader.int32();
                    break;
                case /* PlatformPb platform */ 4:
                    message.platform = reader.int32();
                    break;
                case /* FrameworkPb framework */ 5:
                    message.framework = reader.int32();
                    break;
                case /* BahasaPemrogramanPb bahasa_pemrograman */ 6:
                    message.bahasaPemrograman = reader.int32();
                    break;
                case /* repeated SistemPb koleksi_subsistem */ 7:
                    message.koleksiSubsistem.push(SistemPb.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated KelasPb koleksi_kelas */ 8:
                    message.koleksiKelas.push(KelasPb.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SistemPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string nama = 2; */
        if (message.nama !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nama);
        /* TargetSistemPb target_sistem = 3; */
        if (message.targetSistem !== 0)
            writer.tag(3, WireType.Varint).int32(message.targetSistem);
        /* PlatformPb platform = 4; */
        if (message.platform !== 0)
            writer.tag(4, WireType.Varint).int32(message.platform);
        /* FrameworkPb framework = 5; */
        if (message.framework !== 0)
            writer.tag(5, WireType.Varint).int32(message.framework);
        /* BahasaPemrogramanPb bahasa_pemrograman = 6; */
        if (message.bahasaPemrograman !== 0)
            writer.tag(6, WireType.Varint).int32(message.bahasaPemrograman);
        /* repeated SistemPb koleksi_subsistem = 7; */
        for (let i = 0; i < message.koleksiSubsistem.length; i++)
            SistemPb.internalBinaryWrite(message.koleksiSubsistem[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated KelasPb koleksi_kelas = 8; */
        for (let i = 0; i < message.koleksiKelas.length; i++)
            KelasPb.internalBinaryWrite(message.koleksiKelas[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SistemPb
 */
export const SistemPb = new SistemPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KelasPb$Type extends MessageType<KelasPb> {
    constructor() {
        super("KelasPb", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "nama", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "koleksi_atribut", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AtributPb },
            { no: 4, name: "koleksi_operasi", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OperasiPb }
        ]);
    }
    create(value?: PartialMessage<KelasPb>): KelasPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.nama = "";
        message.koleksiAtribut = [];
        message.koleksiOperasi = [];
        if (value !== undefined)
            reflectionMergePartial<KelasPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KelasPb): KelasPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string nama */ 2:
                    message.nama = reader.string();
                    break;
                case /* repeated AtributPb koleksi_atribut */ 3:
                    message.koleksiAtribut.push(AtributPb.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated OperasiPb koleksi_operasi */ 4:
                    message.koleksiOperasi.push(OperasiPb.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KelasPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string nama = 2; */
        if (message.nama !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nama);
        /* repeated AtributPb koleksi_atribut = 3; */
        for (let i = 0; i < message.koleksiAtribut.length; i++)
            AtributPb.internalBinaryWrite(message.koleksiAtribut[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated OperasiPb koleksi_operasi = 4; */
        for (let i = 0; i < message.koleksiOperasi.length; i++)
            OperasiPb.internalBinaryWrite(message.koleksiOperasi[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message KelasPb
 */
export const KelasPb = new KelasPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AtributPb$Type extends MessageType<AtributPb> {
    constructor() {
        super("AtributPb", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "visibilitas", kind: "enum", T: () => ["VisibilitasPb", VisibilitasPb, "VISIBILITAS_PB_"] },
            { no: 3, name: "diwariskan", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "nama", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "rentang_multiplisitas_diatur", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "rentang_multiplisitas", kind: "message", T: () => RentangMultiplisitasPb },
            { no: 7, name: "tipe", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "bawaan", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "sebagai_id", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "baca_saja", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "selalu_tulis_keunikan", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "unik", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "tuliskan_keterurutan", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "terurut", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "urutan", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AtributPb>): AtributPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.visibilitas = 0;
        message.diwariskan = false;
        message.nama = "";
        message.rentangMultiplisitasDiatur = false;
        message.sebagaiId = false;
        message.bacaSaja = false;
        message.selaluTulisKeunikan = false;
        message.unik = false;
        message.tuliskanKeterurutan = false;
        message.terurut = false;
        message.urutan = false;
        if (value !== undefined)
            reflectionMergePartial<AtributPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AtributPb): AtributPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* VisibilitasPb visibilitas */ 2:
                    message.visibilitas = reader.int32();
                    break;
                case /* bool diwariskan */ 3:
                    message.diwariskan = reader.bool();
                    break;
                case /* string nama */ 4:
                    message.nama = reader.string();
                    break;
                case /* bool rentang_multiplisitas_diatur */ 5:
                    message.rentangMultiplisitasDiatur = reader.bool();
                    break;
                case /* RentangMultiplisitasPb rentang_multiplisitas */ 6:
                    message.rentangMultiplisitas = RentangMultiplisitasPb.internalBinaryRead(reader, reader.uint32(), options, message.rentangMultiplisitas);
                    break;
                case /* optional string tipe */ 7:
                    message.tipe = reader.string();
                    break;
                case /* optional string bawaan */ 8:
                    message.bawaan = reader.string();
                    break;
                case /* bool sebagai_id */ 9:
                    message.sebagaiId = reader.bool();
                    break;
                case /* bool baca_saja */ 10:
                    message.bacaSaja = reader.bool();
                    break;
                case /* bool selalu_tulis_keunikan */ 11:
                    message.selaluTulisKeunikan = reader.bool();
                    break;
                case /* bool unik */ 12:
                    message.unik = reader.bool();
                    break;
                case /* bool tuliskan_keterurutan */ 13:
                    message.tuliskanKeterurutan = reader.bool();
                    break;
                case /* bool terurut */ 14:
                    message.terurut = reader.bool();
                    break;
                case /* bool urutan */ 15:
                    message.urutan = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AtributPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* VisibilitasPb visibilitas = 2; */
        if (message.visibilitas !== 0)
            writer.tag(2, WireType.Varint).int32(message.visibilitas);
        /* bool diwariskan = 3; */
        if (message.diwariskan !== false)
            writer.tag(3, WireType.Varint).bool(message.diwariskan);
        /* string nama = 4; */
        if (message.nama !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.nama);
        /* bool rentang_multiplisitas_diatur = 5; */
        if (message.rentangMultiplisitasDiatur !== false)
            writer.tag(5, WireType.Varint).bool(message.rentangMultiplisitasDiatur);
        /* RentangMultiplisitasPb rentang_multiplisitas = 6; */
        if (message.rentangMultiplisitas)
            RentangMultiplisitasPb.internalBinaryWrite(message.rentangMultiplisitas, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional string tipe = 7; */
        if (message.tipe !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.tipe);
        /* optional string bawaan = 8; */
        if (message.bawaan !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.bawaan);
        /* bool sebagai_id = 9; */
        if (message.sebagaiId !== false)
            writer.tag(9, WireType.Varint).bool(message.sebagaiId);
        /* bool baca_saja = 10; */
        if (message.bacaSaja !== false)
            writer.tag(10, WireType.Varint).bool(message.bacaSaja);
        /* bool selalu_tulis_keunikan = 11; */
        if (message.selaluTulisKeunikan !== false)
            writer.tag(11, WireType.Varint).bool(message.selaluTulisKeunikan);
        /* bool unik = 12; */
        if (message.unik !== false)
            writer.tag(12, WireType.Varint).bool(message.unik);
        /* bool tuliskan_keterurutan = 13; */
        if (message.tuliskanKeterurutan !== false)
            writer.tag(13, WireType.Varint).bool(message.tuliskanKeterurutan);
        /* bool terurut = 14; */
        if (message.terurut !== false)
            writer.tag(14, WireType.Varint).bool(message.terurut);
        /* bool urutan = 15; */
        if (message.urutan !== false)
            writer.tag(15, WireType.Varint).bool(message.urutan);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AtributPb
 */
export const AtributPb = new AtributPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OperasiPb$Type extends MessageType<OperasiPb> {
    constructor() {
        super("OperasiPb", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "nama", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "visibilitas", kind: "enum", T: () => ["VisibilitasPb", VisibilitasPb, "VISIBILITAS_PB_"] },
            { no: 4, name: "tipe_kembalian", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "rentang_multiplisitas_kembalian_diatur", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "rentang_multiplisitas_kembalian", kind: "message", T: () => RentangMultiplisitasPb },
            { no: 7, name: "sebagai_query", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "selalu_tulis_keunikan_kembalian", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "kembalian_unik", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "tuliskan_keterurutan_kembalian", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "kembalian_terurut", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "kembalian_adalah_urutan", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "koleksi_parameter", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ParameterOperasiPb }
        ]);
    }
    create(value?: PartialMessage<OperasiPb>): OperasiPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.nama = "";
        message.visibilitas = 0;
        message.rentangMultiplisitasKembalianDiatur = false;
        message.sebagaiQuery = false;
        message.selaluTulisKeunikanKembalian = false;
        message.kembalianUnik = false;
        message.tuliskanKeterurutanKembalian = false;
        message.kembalianTerurut = false;
        message.kembalianAdalahUrutan = false;
        message.koleksiParameter = [];
        if (value !== undefined)
            reflectionMergePartial<OperasiPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OperasiPb): OperasiPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string nama */ 2:
                    message.nama = reader.string();
                    break;
                case /* VisibilitasPb visibilitas */ 3:
                    message.visibilitas = reader.int32();
                    break;
                case /* optional string tipe_kembalian */ 4:
                    message.tipeKembalian = reader.string();
                    break;
                case /* bool rentang_multiplisitas_kembalian_diatur */ 5:
                    message.rentangMultiplisitasKembalianDiatur = reader.bool();
                    break;
                case /* RentangMultiplisitasPb rentang_multiplisitas_kembalian */ 6:
                    message.rentangMultiplisitasKembalian = RentangMultiplisitasPb.internalBinaryRead(reader, reader.uint32(), options, message.rentangMultiplisitasKembalian);
                    break;
                case /* bool sebagai_query */ 7:
                    message.sebagaiQuery = reader.bool();
                    break;
                case /* bool selalu_tulis_keunikan_kembalian */ 8:
                    message.selaluTulisKeunikanKembalian = reader.bool();
                    break;
                case /* bool kembalian_unik */ 9:
                    message.kembalianUnik = reader.bool();
                    break;
                case /* bool tuliskan_keterurutan_kembalian */ 10:
                    message.tuliskanKeterurutanKembalian = reader.bool();
                    break;
                case /* bool kembalian_terurut */ 11:
                    message.kembalianTerurut = reader.bool();
                    break;
                case /* bool kembalian_adalah_urutan */ 12:
                    message.kembalianAdalahUrutan = reader.bool();
                    break;
                case /* repeated ParameterOperasiPb koleksi_parameter */ 13:
                    message.koleksiParameter.push(ParameterOperasiPb.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OperasiPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string nama = 2; */
        if (message.nama !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nama);
        /* VisibilitasPb visibilitas = 3; */
        if (message.visibilitas !== 0)
            writer.tag(3, WireType.Varint).int32(message.visibilitas);
        /* optional string tipe_kembalian = 4; */
        if (message.tipeKembalian !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.tipeKembalian);
        /* bool rentang_multiplisitas_kembalian_diatur = 5; */
        if (message.rentangMultiplisitasKembalianDiatur !== false)
            writer.tag(5, WireType.Varint).bool(message.rentangMultiplisitasKembalianDiatur);
        /* RentangMultiplisitasPb rentang_multiplisitas_kembalian = 6; */
        if (message.rentangMultiplisitasKembalian)
            RentangMultiplisitasPb.internalBinaryWrite(message.rentangMultiplisitasKembalian, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bool sebagai_query = 7; */
        if (message.sebagaiQuery !== false)
            writer.tag(7, WireType.Varint).bool(message.sebagaiQuery);
        /* bool selalu_tulis_keunikan_kembalian = 8; */
        if (message.selaluTulisKeunikanKembalian !== false)
            writer.tag(8, WireType.Varint).bool(message.selaluTulisKeunikanKembalian);
        /* bool kembalian_unik = 9; */
        if (message.kembalianUnik !== false)
            writer.tag(9, WireType.Varint).bool(message.kembalianUnik);
        /* bool tuliskan_keterurutan_kembalian = 10; */
        if (message.tuliskanKeterurutanKembalian !== false)
            writer.tag(10, WireType.Varint).bool(message.tuliskanKeterurutanKembalian);
        /* bool kembalian_terurut = 11; */
        if (message.kembalianTerurut !== false)
            writer.tag(11, WireType.Varint).bool(message.kembalianTerurut);
        /* bool kembalian_adalah_urutan = 12; */
        if (message.kembalianAdalahUrutan !== false)
            writer.tag(12, WireType.Varint).bool(message.kembalianAdalahUrutan);
        /* repeated ParameterOperasiPb koleksi_parameter = 13; */
        for (let i = 0; i < message.koleksiParameter.length; i++)
            ParameterOperasiPb.internalBinaryWrite(message.koleksiParameter[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OperasiPb
 */
export const OperasiPb = new OperasiPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParameterOperasiPb$Type extends MessageType<ParameterOperasiPb> {
    constructor() {
        super("ParameterOperasiPb", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "nama", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tipe", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bawaan", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "arah", kind: "enum", T: () => ["ArahParameterPb", ArahParameterPb] },
            { no: 6, name: "arah_diatur", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "rentang_multiplisitas_diatur", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "rentang_multiplisitas", kind: "message", T: () => RentangMultiplisitasPb },
            { no: 9, name: "selalu_tulis_keunikan", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "unik", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "tuliskan_keterurutan", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "terurut", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "urutan", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ParameterOperasiPb>): ParameterOperasiPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.nama = "";
        message.arah = 0;
        message.arahDiatur = false;
        message.rentangMultiplisitasDiatur = false;
        message.selaluTulisKeunikan = false;
        message.unik = false;
        message.tuliskanKeterurutan = false;
        message.terurut = false;
        message.urutan = false;
        if (value !== undefined)
            reflectionMergePartial<ParameterOperasiPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParameterOperasiPb): ParameterOperasiPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string nama */ 2:
                    message.nama = reader.string();
                    break;
                case /* optional string tipe */ 3:
                    message.tipe = reader.string();
                    break;
                case /* optional string bawaan */ 4:
                    message.bawaan = reader.string();
                    break;
                case /* ArahParameterPb arah */ 5:
                    message.arah = reader.int32();
                    break;
                case /* bool arah_diatur */ 6:
                    message.arahDiatur = reader.bool();
                    break;
                case /* bool rentang_multiplisitas_diatur */ 7:
                    message.rentangMultiplisitasDiatur = reader.bool();
                    break;
                case /* RentangMultiplisitasPb rentang_multiplisitas */ 8:
                    message.rentangMultiplisitas = RentangMultiplisitasPb.internalBinaryRead(reader, reader.uint32(), options, message.rentangMultiplisitas);
                    break;
                case /* bool selalu_tulis_keunikan */ 9:
                    message.selaluTulisKeunikan = reader.bool();
                    break;
                case /* bool unik */ 10:
                    message.unik = reader.bool();
                    break;
                case /* bool tuliskan_keterurutan */ 11:
                    message.tuliskanKeterurutan = reader.bool();
                    break;
                case /* bool terurut */ 12:
                    message.terurut = reader.bool();
                    break;
                case /* bool urutan */ 13:
                    message.urutan = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParameterOperasiPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string nama = 2; */
        if (message.nama !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nama);
        /* optional string tipe = 3; */
        if (message.tipe !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.tipe);
        /* optional string bawaan = 4; */
        if (message.bawaan !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.bawaan);
        /* ArahParameterPb arah = 5; */
        if (message.arah !== 0)
            writer.tag(5, WireType.Varint).int32(message.arah);
        /* bool arah_diatur = 6; */
        if (message.arahDiatur !== false)
            writer.tag(6, WireType.Varint).bool(message.arahDiatur);
        /* bool rentang_multiplisitas_diatur = 7; */
        if (message.rentangMultiplisitasDiatur !== false)
            writer.tag(7, WireType.Varint).bool(message.rentangMultiplisitasDiatur);
        /* RentangMultiplisitasPb rentang_multiplisitas = 8; */
        if (message.rentangMultiplisitas)
            RentangMultiplisitasPb.internalBinaryWrite(message.rentangMultiplisitas, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bool selalu_tulis_keunikan = 9; */
        if (message.selaluTulisKeunikan !== false)
            writer.tag(9, WireType.Varint).bool(message.selaluTulisKeunikan);
        /* bool unik = 10; */
        if (message.unik !== false)
            writer.tag(10, WireType.Varint).bool(message.unik);
        /* bool tuliskan_keterurutan = 11; */
        if (message.tuliskanKeterurutan !== false)
            writer.tag(11, WireType.Varint).bool(message.tuliskanKeterurutan);
        /* bool terurut = 12; */
        if (message.terurut !== false)
            writer.tag(12, WireType.Varint).bool(message.terurut);
        /* bool urutan = 13; */
        if (message.urutan !== false)
            writer.tag(13, WireType.Varint).bool(message.urutan);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ParameterOperasiPb
 */
export const ParameterOperasiPb = new ParameterOperasiPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RentangMultiplisitasPb$Type extends MessageType<RentangMultiplisitasPb> {
    constructor() {
        super("RentangMultiplisitasPb", [
            { no: 1, name: "minimal", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "maksimal", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RentangMultiplisitasPb>): RentangMultiplisitasPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.minimal = 0;
        message.maksimal = 0;
        if (value !== undefined)
            reflectionMergePartial<RentangMultiplisitasPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RentangMultiplisitasPb): RentangMultiplisitasPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 minimal */ 1:
                    message.minimal = reader.int32();
                    break;
                case /* int32 maksimal */ 2:
                    message.maksimal = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RentangMultiplisitasPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 minimal = 1; */
        if (message.minimal !== 0)
            writer.tag(1, WireType.Varint).int32(message.minimal);
        /* int32 maksimal = 2; */
        if (message.maksimal !== 0)
            writer.tag(2, WireType.Varint).int32(message.maksimal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RentangMultiplisitasPb
 */
export const RentangMultiplisitasPb = new RentangMultiplisitasPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SequenceDiagramPb$Type extends MessageType<SequenceDiagramPb> {
    constructor() {
        super("SequenceDiagramPb", [
            { no: 1, name: "nama", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "koleksiKomponen", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KomponenSequenceDiagramPb },
            { no: 3, name: "koleksiObjek", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ObjekPb }
        ]);
    }
    create(value?: PartialMessage<SequenceDiagramPb>): SequenceDiagramPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nama = "";
        message.koleksiKomponen = [];
        message.koleksiObjek = [];
        if (value !== undefined)
            reflectionMergePartial<SequenceDiagramPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SequenceDiagramPb): SequenceDiagramPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string nama */ 1:
                    message.nama = reader.string();
                    break;
                case /* repeated KomponenSequenceDiagramPb koleksiKomponen */ 2:
                    message.koleksiKomponen.push(KomponenSequenceDiagramPb.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ObjekPb koleksiObjek */ 3:
                    message.koleksiObjek.push(ObjekPb.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SequenceDiagramPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string nama = 1; */
        if (message.nama !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.nama);
        /* repeated KomponenSequenceDiagramPb koleksiKomponen = 2; */
        for (let i = 0; i < message.koleksiKomponen.length; i++)
            KomponenSequenceDiagramPb.internalBinaryWrite(message.koleksiKomponen[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated ObjekPb koleksiObjek = 3; */
        for (let i = 0; i < message.koleksiObjek.length; i++)
            ObjekPb.internalBinaryWrite(message.koleksiObjek[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SequenceDiagramPb
 */
export const SequenceDiagramPb = new SequenceDiagramPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KomponenSequenceDiagramPb$Type extends MessageType<KomponenSequenceDiagramPb> {
    constructor() {
        super("KomponenSequenceDiagramPb", [
            { no: 1, name: "jenis", kind: "enum", T: () => ["JenisKomponenSequenceDiagramPb", JenisKomponenSequenceDiagramPb] },
            { no: 2, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<KomponenSequenceDiagramPb>): KomponenSequenceDiagramPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jenis = 0;
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<KomponenSequenceDiagramPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KomponenSequenceDiagramPb): KomponenSequenceDiagramPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* JenisKomponenSequenceDiagramPb jenis */ 1:
                    message.jenis = reader.int32();
                    break;
                case /* uint32 id */ 2:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KomponenSequenceDiagramPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* JenisKomponenSequenceDiagramPb jenis = 1; */
        if (message.jenis !== 0)
            writer.tag(1, WireType.Varint).int32(message.jenis);
        /* uint32 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message KomponenSequenceDiagramPb
 */
export const KomponenSequenceDiagramPb = new KomponenSequenceDiagramPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ObjekPb$Type extends MessageType<ObjekPb> {
    constructor() {
        super("ObjekPb", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "nama", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "idKlas", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ObjekPb>): ObjekPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.nama = "";
        message.idKlas = 0;
        if (value !== undefined)
            reflectionMergePartial<ObjekPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ObjekPb): ObjekPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string nama */ 2:
                    message.nama = reader.string();
                    break;
                case /* uint32 idKlas */ 3:
                    message.idKlas = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ObjekPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string nama = 2; */
        if (message.nama !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nama);
        /* uint32 idKlas = 3; */
        if (message.idKlas !== 0)
            writer.tag(3, WireType.Varint).uint32(message.idKlas);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ObjekPb
 */
export const ObjekPb = new ObjekPb$Type();
