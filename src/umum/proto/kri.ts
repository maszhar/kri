// @generated by protobuf-ts 2.9.5
// @generated from protobuf file "kri.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ProyekPb
 */
export interface ProyekPb {
    /**
     * @generated from protobuf field: string nama = 1;
     */
    nama: string;
    /**
     * @generated from protobuf field: repeated SistemPb koleksi_sistem = 2;
     */
    koleksiSistem: SistemPb[];
}
/**
 * @generated from protobuf message SistemPb
 */
export interface SistemPb {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string nama = 2;
     */
    nama: string;
    /**
     * @generated from protobuf field: TargetSistemPb target = 3;
     */
    target: TargetSistemPb;
    /**
     * @generated from protobuf field: FrameworkPb framework = 4;
     */
    framework: FrameworkPb;
    /**
     * @generated from protobuf field: BahasaPemrogramanPb bahasa_pemrograman = 5;
     */
    bahasaPemrograman: BahasaPemrogramanPb;
    /**
     * @generated from protobuf field: repeated SistemPb koleksi_subsistem = 6;
     */
    koleksiSubsistem: SistemPb[];
}
/**
 * @generated from protobuf message KlasPb
 */
export interface KlasPb {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string nama = 2;
     */
    nama: string;
}
/**
 * @generated from protobuf message SequenceDiagramPb
 */
export interface SequenceDiagramPb {
    /**
     * @generated from protobuf field: string nama = 1;
     */
    nama: string;
    /**
     * @generated from protobuf field: repeated KomponenSequenceDiagramPb koleksiKomponen = 2;
     */
    koleksiKomponen: KomponenSequenceDiagramPb[];
    /**
     * @generated from protobuf field: repeated ObjekPb koleksiObjek = 3;
     */
    koleksiObjek: ObjekPb[];
}
/**
 * @generated from protobuf message KomponenSequenceDiagramPb
 */
export interface KomponenSequenceDiagramPb {
    /**
     * @generated from protobuf field: JenisKomponenSequenceDiagramPb jenis = 1;
     */
    jenis: JenisKomponenSequenceDiagramPb;
    /**
     * @generated from protobuf field: uint32 id = 2;
     */
    id: number;
}
/**
 * @generated from protobuf message ObjekPb
 */
export interface ObjekPb {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string nama = 2;
     */
    nama: string;
    /**
     * @generated from protobuf field: uint32 idKlas = 3;
     */
    idKlas: number;
}
/**
 * @generated from protobuf enum TargetSistemPb
 */
export enum TargetSistemPb {
    /**
     * @generated from protobuf enum value: TARGET_SISTEM_PB_TIDAK_DIATUR = 0;
     */
    TIDAK_DIATUR = 0,
    /**
     * @generated from protobuf enum value: TARGET_SISTEM_PB_CROSS_PLATFORM_DESKTOP = 1;
     */
    CROSS_PLATFORM_DESKTOP = 1
}
/**
 * @generated from protobuf enum FrameworkPb
 */
export enum FrameworkPb {
    /**
     * @generated from protobuf enum value: FRAMEWORK_PB_TIDAK_DIATUR = 0;
     */
    TIDAK_DIATUR = 0,
    /**
     * @generated from protobuf enum value: FRAMEWORK_PB_ELECTRON = 1;
     */
    ELECTRON = 1
}
/**
 * @generated from protobuf enum BahasaPemrogramanPb
 */
export enum BahasaPemrogramanPb {
    /**
     * @generated from protobuf enum value: BAHASA_PEMROGRAMAN_PB_TIDAK_DIATUR = 0;
     */
    TIDAK_DIATUR = 0,
    /**
     * @generated from protobuf enum value: BAHASA_PEMROGRAMAN_PB_TYPESCRIPT = 1;
     */
    TYPESCRIPT = 1
}
/**
 * @generated from protobuf enum JenisKomponenSequenceDiagramPb
 */
export enum JenisKomponenSequenceDiagramPb {
    /**
     * @generated from protobuf enum value: JENIS_KOMPONEN_SD_OBJEK = 0;
     */
    JENIS_KOMPONEN_SD_OBJEK = 0
}
// @generated message type with reflection information, may provide speed optimized methods
class ProyekPb$Type extends MessageType<ProyekPb> {
    constructor() {
        super("ProyekPb", [
            { no: 1, name: "nama", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "koleksi_sistem", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SistemPb }
        ]);
    }
    create(value?: PartialMessage<ProyekPb>): ProyekPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nama = "";
        message.koleksiSistem = [];
        if (value !== undefined)
            reflectionMergePartial<ProyekPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProyekPb): ProyekPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string nama */ 1:
                    message.nama = reader.string();
                    break;
                case /* repeated SistemPb koleksi_sistem */ 2:
                    message.koleksiSistem.push(SistemPb.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProyekPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string nama = 1; */
        if (message.nama !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.nama);
        /* repeated SistemPb koleksi_sistem = 2; */
        for (let i = 0; i < message.koleksiSistem.length; i++)
            SistemPb.internalBinaryWrite(message.koleksiSistem[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ProyekPb
 */
export const ProyekPb = new ProyekPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SistemPb$Type extends MessageType<SistemPb> {
    constructor() {
        super("SistemPb", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "nama", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "target", kind: "enum", T: () => ["TargetSistemPb", TargetSistemPb, "TARGET_SISTEM_PB_"] },
            { no: 4, name: "framework", kind: "enum", T: () => ["FrameworkPb", FrameworkPb, "FRAMEWORK_PB_"] },
            { no: 5, name: "bahasa_pemrograman", kind: "enum", T: () => ["BahasaPemrogramanPb", BahasaPemrogramanPb, "BAHASA_PEMROGRAMAN_PB_"] },
            { no: 6, name: "koleksi_subsistem", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SistemPb }
        ]);
    }
    create(value?: PartialMessage<SistemPb>): SistemPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.nama = "";
        message.target = 0;
        message.framework = 0;
        message.bahasaPemrograman = 0;
        message.koleksiSubsistem = [];
        if (value !== undefined)
            reflectionMergePartial<SistemPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SistemPb): SistemPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string nama */ 2:
                    message.nama = reader.string();
                    break;
                case /* TargetSistemPb target */ 3:
                    message.target = reader.int32();
                    break;
                case /* FrameworkPb framework */ 4:
                    message.framework = reader.int32();
                    break;
                case /* BahasaPemrogramanPb bahasa_pemrograman */ 5:
                    message.bahasaPemrograman = reader.int32();
                    break;
                case /* repeated SistemPb koleksi_subsistem */ 6:
                    message.koleksiSubsistem.push(SistemPb.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SistemPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string nama = 2; */
        if (message.nama !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nama);
        /* TargetSistemPb target = 3; */
        if (message.target !== 0)
            writer.tag(3, WireType.Varint).int32(message.target);
        /* FrameworkPb framework = 4; */
        if (message.framework !== 0)
            writer.tag(4, WireType.Varint).int32(message.framework);
        /* BahasaPemrogramanPb bahasa_pemrograman = 5; */
        if (message.bahasaPemrograman !== 0)
            writer.tag(5, WireType.Varint).int32(message.bahasaPemrograman);
        /* repeated SistemPb koleksi_subsistem = 6; */
        for (let i = 0; i < message.koleksiSubsistem.length; i++)
            SistemPb.internalBinaryWrite(message.koleksiSubsistem[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SistemPb
 */
export const SistemPb = new SistemPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KlasPb$Type extends MessageType<KlasPb> {
    constructor() {
        super("KlasPb", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "nama", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KlasPb>): KlasPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.nama = "";
        if (value !== undefined)
            reflectionMergePartial<KlasPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KlasPb): KlasPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string nama */ 2:
                    message.nama = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KlasPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string nama = 2; */
        if (message.nama !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nama);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message KlasPb
 */
export const KlasPb = new KlasPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SequenceDiagramPb$Type extends MessageType<SequenceDiagramPb> {
    constructor() {
        super("SequenceDiagramPb", [
            { no: 1, name: "nama", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "koleksiKomponen", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KomponenSequenceDiagramPb },
            { no: 3, name: "koleksiObjek", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ObjekPb }
        ]);
    }
    create(value?: PartialMessage<SequenceDiagramPb>): SequenceDiagramPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nama = "";
        message.koleksiKomponen = [];
        message.koleksiObjek = [];
        if (value !== undefined)
            reflectionMergePartial<SequenceDiagramPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SequenceDiagramPb): SequenceDiagramPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string nama */ 1:
                    message.nama = reader.string();
                    break;
                case /* repeated KomponenSequenceDiagramPb koleksiKomponen */ 2:
                    message.koleksiKomponen.push(KomponenSequenceDiagramPb.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ObjekPb koleksiObjek */ 3:
                    message.koleksiObjek.push(ObjekPb.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SequenceDiagramPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string nama = 1; */
        if (message.nama !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.nama);
        /* repeated KomponenSequenceDiagramPb koleksiKomponen = 2; */
        for (let i = 0; i < message.koleksiKomponen.length; i++)
            KomponenSequenceDiagramPb.internalBinaryWrite(message.koleksiKomponen[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated ObjekPb koleksiObjek = 3; */
        for (let i = 0; i < message.koleksiObjek.length; i++)
            ObjekPb.internalBinaryWrite(message.koleksiObjek[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SequenceDiagramPb
 */
export const SequenceDiagramPb = new SequenceDiagramPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KomponenSequenceDiagramPb$Type extends MessageType<KomponenSequenceDiagramPb> {
    constructor() {
        super("KomponenSequenceDiagramPb", [
            { no: 1, name: "jenis", kind: "enum", T: () => ["JenisKomponenSequenceDiagramPb", JenisKomponenSequenceDiagramPb] },
            { no: 2, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<KomponenSequenceDiagramPb>): KomponenSequenceDiagramPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jenis = 0;
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<KomponenSequenceDiagramPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KomponenSequenceDiagramPb): KomponenSequenceDiagramPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* JenisKomponenSequenceDiagramPb jenis */ 1:
                    message.jenis = reader.int32();
                    break;
                case /* uint32 id */ 2:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KomponenSequenceDiagramPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* JenisKomponenSequenceDiagramPb jenis = 1; */
        if (message.jenis !== 0)
            writer.tag(1, WireType.Varint).int32(message.jenis);
        /* uint32 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message KomponenSequenceDiagramPb
 */
export const KomponenSequenceDiagramPb = new KomponenSequenceDiagramPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ObjekPb$Type extends MessageType<ObjekPb> {
    constructor() {
        super("ObjekPb", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "nama", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "idKlas", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ObjekPb>): ObjekPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.nama = "";
        message.idKlas = 0;
        if (value !== undefined)
            reflectionMergePartial<ObjekPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ObjekPb): ObjekPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string nama */ 2:
                    message.nama = reader.string();
                    break;
                case /* uint32 idKlas */ 3:
                    message.idKlas = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ObjekPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string nama = 2; */
        if (message.nama !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nama);
        /* uint32 idKlas = 3; */
        if (message.idKlas !== 0)
            writer.tag(3, WireType.Varint).uint32(message.idKlas);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ObjekPb
 */
export const ObjekPb = new ObjekPb$Type();
